
In This project I will be creating a partitioning of a road network dataset which would be used in the subsequent assignments. Consider the road network dataset which has been loaded with this assignment. This dataset models an underlying road network as a graph. Nodes represent road intersections, whereas edges represent road networks. Each node is associated with a x and y coordinates representing its spatial locations. Each edge is associated with a notion of edge length.

Determining the x_min, x_max, y_min, y_max among all the node coordinates. The rectangle defined by (x_min,y_min) as bottom left and (x_max,y_max) as upper right corner would define a box fitting the entire dataset. Start overlaying cells of size kXk (k to be varied during evaluation) over this rectangle to partition the graph. It is conceivable that the cells (being square in size) would not fit the rectangle perfectly. To address this case, you may extend the x_max and/or y_max boundary line to fit them. This would create some empty space in the cells at the boundary, but you can choose to ignore
it. The portion of the graph inside a cell would be stored in a single disk block (along with overflow blocks as needed) which is simulated as a file in your code. In your code, you need to define a disk block as a file which can store only B number of entries (distinct nodes or edges).Considering an arbitrary cell C in this grid. This cell C is defined by its upper and lower limits on its x and y
coordinates. All the nodes which are spatially inside this cell would be stored in the disk block corresponding to this cell. In addition, all the edges which are amongst the nodes inside a cell would also be stored in the same disk block. And lastly, the boundary edges (i.e., edges which have one node in C and another outside) would also be stored in the same disk block.

This assignment develops a shortest path algorithm implementation (Dijkstra’s) which runs over the partitions developed previously. Input to the algorithm consists of a source node id and destination node id. As Dijsktra’s algorithm proceeds, it would be reading “disk blocks' ' (simulated as files in your code) corresponding to various cell-ids (refer to lecture videos). Ideally, such a system should have a main memory buffer manager to manage the “pages/disk blocks'' read into the main memory. However, I would assumed that I have unlimited space in the main memory for bringing in the “disk blocks.” Nevertheless, for every request for accessing the portion of the graph corresponding to a cell, your code must first check if it's information is already present. In case, it's not present then its “disk block(s)” should be read from the files.
